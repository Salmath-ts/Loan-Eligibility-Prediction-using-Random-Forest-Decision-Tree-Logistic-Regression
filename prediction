# Importing required libraries
import pandas as pd

# Loading the dataset
loan = pd.read_csv('Loan_Data.csv')  # Load dataset from CSV file
print(loan.shape)  # Display the shape of the dataset (rows, columns)

# Displaying the last 5 rows of the dataset
loan.tail()

# Getting an overview of the dataset
loan.info()  # Summary of dataset including non-null counts and datatypes

# Checking for missing values
loan.isna().sum()  # Total number of missing values in each column

# Calculating the percentage of missing values
loan.isna().sum() * 100 / len(loan)

# Dropping the 'Loan_ID' column as it is not needed
loan = loan.drop('Loan_ID', axis=1)  # axis=1 specifies column-wise operation
loan.head(1)  # Display the first row of the dataset

# Dropping rows with missing values in specified columns
columns = ['Gender', 'Dependents', 'LoanAmount', 'Loan_Amount_Term']
loan = loan.dropna(subset=columns)
loan.isna().sum() * 100 / len(loan)  # Re-check missing values

# Filling missing values in categorical columns with their mode
loan['Self_Employed'] = loan['Self_Employed'].fillna(loan['Self_Employed'].mode()[0])
loan['Credit_History'] = loan['Credit_History'].fillna(loan['Credit_History'].mode()[0])
loan.isna().sum()  # Final check for missing values

# Checking the updated dataset shape
loan.shape

# Visualizing the count of 'Married' status by 'Loan_Status'
import seaborn as sns
sns.countplot(x='Married', hue='Loan_Status', data=loan)

# Displaying a random sample of 5 rows
loan.sample(5)

# Replacing '3+' with '4' in 'Dependents' column
loan['Dependents'] = loan['Dependents'].replace(to_replace="3+", value='4')
loan['Dependents'].unique()  # Display unique values in 'Dependents'

# Displaying unique values in other categorical columns
loan['Gender'].unique()
loan['Married'].unique()
loan['Education'].unique()
loan['Self_Employed'].unique()
loan['Property_Area'].unique()
loan['Loan_Status'].unique()

# Encoding categorical variables into numerical values
loan['Gender'] = loan['Gender'].map({'Male': 1, 'Female': 0}).astype('int')
loan['Married'] = loan['Married'].map({'Yes': 1, 'No': 0}).astype('int')
loan['Education'] = loan['Education'].map({'Graduate': 1, 'Not Graduate': 0}).astype('int')
loan['Self_Employed'] = loan['Self_Employed'].map({'Yes': 1, 'No': 0}).astype('int')
loan['Property_Area'] = loan['Property_Area'].map({'Rural': 0, 'Semiurban': 2, 'Urban': 1}).astype('int')
loan['Loan_Status'] = loan['Loan_Status'].map({'Y': 1, 'N': 0}).astype('int')

# Display the first 5 rows of the processed dataset
loan.head()

# Separating features (X) and target variable (y)
X = loan.iloc[:, :-1]  # All columns except the last one
X

y = loan.iloc[:, -1]  # The last column
y

# Scaling numerical features using StandardScaler
cols = ['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term']
from sklearn.preprocessing import StandardScaler
st = StandardScaler()
X[cols] = st.fit_transform(X[cols])
X

# Importing required libraries for model training and evaluation
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score
import numpy as np
import warnings
warnings = warnings.filterwarnings('ignore')  # Suppress warnings

# Dictionary to store model performance
model_loan = {}

# Function to train, evaluate, and store model performance
def model_val(model, X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(f"{model} accuracy is {accuracy_score(y_test, y_pred)}")
    score = cross_val_score(model, X, y, cv=5)
    print(f"{model} Average cross-validation score is {np.mean(score)}")
    model_loan[model] = round(np.mean(score) * 100, 2)

# Logistic Regression
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model_val(model, X, y)

# Decision Tree Classifier
from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model_val(model, X, y)

# Random Forest Classifier
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model_val(model, X, y)

# Displaying the model performance
model_loan

# Creating a new sample input for prediction
new = pd.DataFrame({
    'Gender': 0,
    'Married': 1,
    'Dependents': 2,
    'Education': 1,
    'Self_Employed': 1,
    'ApplicantIncome': 25000,
    'CoapplicantIncome': 10000,
    'LoanAmount': 50000,
    'Loan_Amount_Term': 12,
    'Credit_History': 1.0,
    'Property_Area': 0
}, index=[0])
new

# Predicting loan status for the new sample
result = model.predict(new)

# Displaying the prediction result
if result == 1:
    print('Loan Status : Approved')
else:
    print('Loan Status : Rejected')

# Display the processed dataset
loan.head()
